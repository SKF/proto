syntax = "proto3";
package grpcapi;

option csharp_namespace = "SKF.Enlight.API.Hierarchy";

import "common/common.proto";

service Hierarchy {
  rpc DeepPing (common.Void) returns (common.PrimitiveString) {}

  rpc GetNode (common.PrimitiveString) returns (Node) {}
  rpc GetNodes (common.PrimitiveString) returns (Nodes) {}
  rpc GetChildNodes (common.PrimitiveString) returns (Nodes) {}
  rpc GetSubTree (GetSubTreeInput) returns (Nodes) {}
  rpc GetParentNode (common.PrimitiveString) returns (Node) {}
  rpc GetAncestors (GetAncestorsInput) returns (GetAncestorsOutput) {}
  rpc GetCompany (common.PrimitiveString) returns (Node) {}
  rpc GetAssetTaxonomy (common.Void) returns (AssetTypes) {}

  rpc GetNodeIdByOrigin (common.Origin) returns (common.PrimitiveString) {}

  rpc SaveNode (SaveNodeInput) returns (common.PrimitiveString) {}
  rpc DeleteNode (DeleteNodeInput) returns (common.Void) {}
  rpc CopyNode (CopyNodeInput) returns (common.PrimitiveString) {}

  rpc GetEvents (GetEventsInput) returns (GetEventsOutput) {}
}

message AssetTypes {
  message Class {
    message Type {
      string name = 1;
      repeated string sequences = 2;
    }
    string name = 1;
    repeated Type types = 2;
  }
  repeated Class classes = 1;
}

message CollectionInterval {
  enum Unit {
    MONTHS = 0; // Month should be default
    DAYS = 1;
    WEEKS = 2;
  }
  Unit unit = 1;
  int32 value = 2;
}

message MeasurementPoint {
  string angular = 1;
  int32 bearing = 3;
  string measurementType = 4;
  string shaft = 5;
  string shaftSide = 6;
  double fixedSpeedRPM = 7;
  CollectionInterval collectionInterval = 8;
}

enum ValueType {
  NUMERIC = 0;
  SINGLE_CHOICE = 1;
  MULTI_CHOICE = 2;
}

enum VisualizationType {
  VISUALIZATION_NONE = 0;
  VISUALIZATION_CIRCULAR_GAUGE = 1;
  VISUALIZATION_LEVEL_GAUGE = 2;
}

message InspectionPoint {
  reserved 1;
  ValueType valueType = 4;
  string numericUnit = 2;
  repeated string answers = 3;
  VisualizationType visualizationType = 5;
  string visualizationMinValue = 6;
  string visualizationMaxValue = 7;
  CollectionInterval collectionInterval = 8;
}

message LubricationPoint {
  string lubricant = 1;
  int32 volume = 2;
  LubricantUnit unit = 3;
  int32 interval = 4; // days
  CollectionInterval collectionInterval = 5;
}

enum LubricantUnit {
  GRAM = 0;
  OUNCE = 1;
  CM3 = 2;
}

message AssetNode {
  string criticality = 1;
  string type = 2;
  string class = 3;
  string sequence = 4;
}

message Node {
  reserved 11;
  string id = 1;
  string label = 2;
  string description = 3;
  string type = 4;
  string criticality = 5;
  string subType = 6;
  common.PrimitiveString industrySegment = 16;
  common.Origin origin = 7;
  AssetNode assetNode = 8;
  MeasurementPoint measurementPoint = 9;
  InspectionPoint inspectionPoint = 10;
  LubricationPoint lubricationPoint = 14;
  common.PrimitiveInt64 position = 12;
  common.PrimitiveString tags = 13;
  string parentId = 15;
}

message Nodes {
  repeated Node nodes = 1;
}

message GetEventsInput {
  int64 since = 1;
  common.PrimitiveInt32 limit = 2;
  common.PrimitiveString customerId = 3;
}

message GetEventsOutput {
  bytes events = 1;
}

message SaveNodeInput {
  string userId = 1;
  Node node = 3;
  string parentId = 2;
  common.Origin parentOrigin = 4;
}

message CopyNodeInput {
  string userId = 1;
  string srcNodeId = 2;
  string dstParentNodeId = 3;
}

message DeleteNodeInput {
  string userId = 1;
  string nodeId = 2;
  common.Origin origin = 3;
}

message GetSubTreeInput {
  string rootId = 1;
  int32 depth = 2;
  repeated string nodeTypes = 3;
}

message GetAncestorsInput {
  string node_id = 1;
}

message GetAncestorsOutput {
  repeated AncestorNode nodes = 1;
}

message AncestorNode {
  string id = 1;
  common.Origin origin = 2;
  string label = 3;
  string description = 4;
  string type = 5;
  string subType = 6;
  string parentId = 7;
}
