# Use the `minimal` base image. Which is unfortunately not well documented
# (not present in https://docs.travis-ci.com/user/languages/.
# Each job is then responsible to override this with their specific image.
language: minimal

env:
  global:
    - SERVICES="hierarchy iam iot pas reports"

stages:
  - install
  - build
  - deploy

addons:
  apt:
    packages:
      - tree

# Travis does not share any data between jobs, which we need.
# Cache all the generated files between stages (and builds)
# Each 'language:' has gets its own cache from Travis automatically.
cache:
  directories:
    - build

# Skip any language defaults
install:
  - git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*

# Skip any language defaults
script: skip

# NOTE: All 'stage:' targets _MUST_ have the 'language:' tag to see the correct
# cache folders!
jobs:
  include:
    # Golang
    - stage: install
      name: "Go: Clean cache, install protoc compiler and fetch gRPC protoc plugin"
      language: go
      go: "1.10"
      before_install:
        - tree build
        - rm -rf build
      install:
        - mkdir -p build/protoc
        - pushd build/protoc
        - wget https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
        - unzip -o protoc*.zip
        - popd
      script:
        - go get -u google.golang.org/grpc
        - go get -d -u github.com/golang/protobuf/protoc-gen-go
        - git -C $GOPATH/src/github.com/golang/protobuf checkout v1.2.0
        - go install github.com/golang/protobuf/protoc-gen-go
        - mv $GOPATH/bin build/bin
      after_failure:
        - tree build
        - tree $GOPATH

    - stage: build
      name: "Go: Generate sources"
      language: go
      go: "1.10"
      script: bash scripts/build_go.sh
      after_failure:
        - ls -l $PROTOC
        - ls -l $PLUGIN
        - tree build
        - tree $GOPATH

    - stage: deploy
      name: "Go: Deploy generated sources back to repo"
      language: go
      go: "1.10"
      deploy:
        provider: script
        script: bash scripts/upload_to_github.sh go go1 build/go
        skip_cleanup: true
        on:
          tags: true
      after_failure:
        - tree build
        - tree $GOPATH

    # C# & .NET
    - stage: install
      name: "C#: Clean out and fetch protoc & gRPC protoc plugin"
      language: csharp
      mono: none
      dotnet: 2.0
      before_install:
        - tree build
        - rm -rf build
      install:
        - mkdir -p build/csharp_project
        - pushd build/csharp_project
        - dotnet new console
        - env NUGET_PACKAGES=$PWD/packages dotnet add package grpc.tools
        - popd
      after_failure:
        - tree build

    - stage: build
      name: "C#: Generate sources and build .NET nupkg"
      language: csharp
      mono: none
      dotnet: 2.0
      script: bash scripts/build_csharp.sh
      after_success: # TODO import generated code
        - dotnet build --configuration Release --no-restore --verbosity n
        - dotnet pack --configuration Release --no-build --no-restore --verbosity n /p:Version=$TRAVIS_BUILD_NUMBER
      after_failure:
        - ls -l $TOOLS
        - ls -l $PROTOC
        - ls -l $PLUGIN
        - tree build

    - stage: deploy
      name: "C#: Deploy generated sources back to repo"
      language: csharp
      mono: none
      dotnet: 2.0
      deploy:
        provider: script
        script: bash scripts/upload_to_github.sh csharp csharp build/csharp
        skip_cleanup: true
        on:
          tags: true
      after_failure:
        - tree build

    - stage: deploy
      name: "C#: Deploy nupkg to NuGet"
      language: csharp
      mono: none
      dotnet: 2.0
      script: true # TODO
      after_failure:
        - tree build
