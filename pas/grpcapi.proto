syntax = "proto3";
package pasapi;

option csharp_namespace = "SKF.Enlight.API.PAS";
option go_package = "github.com/SKF/proto/pas";

import "common/common.proto";

service PointAlarmStatus {
  rpc DeepPing (common.Void) returns (DeepPingOutput) {}

  rpc SetPointAlarmThreshold (SetPointAlarmThresholdInput) returns (SetPointAlarmThresholdOutput) {}
  rpc GetPointAlarmThreshold (GetPointAlarmThresholdInput) returns (GetPointAlarmThresholdOutput) {}

  rpc SetPointAlarmStatus (SetPointAlarmStatusInput) returns (SetPointAlarmStatusOutput) {}
  rpc GetPointAlarmStatus (GetPointAlarmStatusInput) returns (GetPointAlarmStatusOutput) {}
  rpc GetPointAlarmStatusEventLog (GetPointAlarmStatusEventLogInput) returns (GetPointAlarmStatusEventLogOutput) {}
  rpc CalculateAndSetPointAlarmStatus (CalculateAndSetPointAlarmStatusInput) returns (common.Void) {}
}


// DeepPing Messages
message DeepPingOutput {
  string value = 1;
}

message NodeData {
  int64 created_at = 1;
  NodeDataContentType content_type = 2;
  DataPoint data_point = 3;
  Spectrum spectrum = 4;
  TimeSeries time_series = 5;
  string note = 6;
  Media media_v2 = 9;
  repeated string question_answers = 8;
}
enum NodeDataContentType {
  DEFAULT = 0;
  DATA_POINT = 1;
  SPECTRUM = 2;
  TIME_SERIES = 3;
  NOTE = 4;
  MEDIA_V2 = 7;
  QUESTION_ANSWERS = 6;
}
message Coordinate {
  double x = 1;
  double y = 2;
}
message DataPoint {
  Coordinate coordinate = 1;
  string x_unit = 2;
  string y_unit = 3;
}
message Spectrum {
  repeated Coordinate coordinates = 1;
  string x_unit = 2;
  string y_unit = 3;
  string window_function = 4;
  double speed_rpm = 5;
}
message TimeSeries {
  repeated Coordinate coordinates = 1;
  string x_unit = 2;
  string y_unit = 3;
}
message Media {
  string id = 1;
  MediaType type = 2;
  bytes media = 3;
}
enum MediaType {
  UNKNOWN = 0;
  AUDIO_WAV = 1;
  IMAGE_JPEG = 2;
  IMAGE_PNG = 3;
  AUDIO_MP4 = 4;
}

// SetPointAlarmThreshold Messages
message SetPointAlarmThresholdInput {
  string node_id = 1;
  string user_id = 2;
  ThresholdType type = 3;
  Overall overall = 4;
  common.Origin origin = 5;
  Inspection inspection = 6;
  repeated BandAlarm band_alarms = 7;
  DoubleObject full_scale = 8;
}
message SetPointAlarmThresholdOutput {}


// GetPointAlarmThreshold Messages
message GetPointAlarmThresholdInput {
  string node_id = 1;
}
message GetPointAlarmThresholdOutput {
  ThresholdType type = 1;
  Overall overall = 2;
  Inspection inspection = 3;
  DoubleObject full_scale = 4;
  repeated BandAlarm band_alarms = 5;
}


// SetPointAlarmStatus Messages
message SetPointAlarmStatusInput {
  string node_id = 1;
  AlarmStatus alarm_status = 2;
  common.Origin origin = 3;
  string set_by = 4;
}
message SetPointAlarmStatusOutput {}


// GetPointAlarmStatus Messages
message GetPointAlarmStatusInput {
  string node_id = 1;
}
message GetPointAlarmStatusOutput {
  AlarmStatus alarm_status = 1;
  ExternalAlarm external_alarm = 2;
}

message ExternalAlarm {
  AlarmStatus status = 1;
  string set_by = 2;
}

message PointAlarmStatusEvent {
  string seq_id = 1;
  string node_id = 2;
  int64 timestamp = 3;
  AlarmStatus status = 4;
}

message GetPointAlarmStatusEventLogInput {
  string seq_id = 1;
}

message GetPointAlarmStatusEventLogOutput {
  repeated PointAlarmStatusEvent events = 1;
}

// CalculateAndSetPointAlarmStatusInput
message CalculateAndSetPointAlarmStatusInput {
  string node_id = 1;
  NodeData node_data = 2;
}

enum AlarmStatus {
  NOT_CONFIGURED = 0; // No threshold configured.
  NO_DATA = 1;        // No measurement data.
  GOOD = 2;           // Latest measurement data within a good interval.
  ALERT = 3;          // Latest measurement data within an alert interval.
  DANGER = 4;         // Latest measurement data within a danger interval.
}

enum ThresholdType {
  NONE = 0;
  OVERALL_IN_WINDOW = 1;
  OVERALL_OUT_OF_WINDOW = 2;
  INSPECTION = 3;
}

message DoubleObject {
  double value = 1;
}

message Overall {
  DoubleObject outer_high = 1;
  DoubleObject inner_high = 2;
  DoubleObject inner_low = 3;
  DoubleObject outer_low = 4;
  string unit = 5;
}

message Inspection {
  repeated InspectionChoice choices = 1;
}

message InspectionChoice {
  string answer = 1;
  string instruction = 2;
  AlarmStatus status = 3;
}

// Band Alarms

message BandAlarm {
  string label = 1;
  Frequency min_frequency = 2;
  Frequency max_frequency = 3;

  BandAlarmOverallThreshold overall_threshold = 4;
}

message Frequency {
  FrequencyType value_type = 1;
  DoubleObject value = 2;

  enum FrequencyType {
    UNKNOWN = 0;
    FIXED = 1;
    SPEED_MULTIPLE = 2;
  }
}

message BandAlarmOverallThreshold {
  ThresholdValue upper_alert = 1;
  ThresholdValue upper_danger = 2;
}

message ThresholdValue {
  ThresholdValueType value_type = 1;
  DoubleObject value = 2;

  enum ThresholdValueType {
    UNKNOWN = 0;
    ABSOLUTE = 1;
    RELATIVE_FULLSCALE = 2;
  }
}
